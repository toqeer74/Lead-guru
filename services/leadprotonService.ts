import { Lead, GroundingChunk } from '../types';

const key = process.env.LEADPROTON_API_KEY;
if (!key) {
  console.warn('LEADPROTON_API_KEY is not set. LeadProton AI features will use safe fallbacks.');
}

export const generateEmailPatterns = async (firstName: string, lastName: string, domain: string): Promise<string[]> => {
  try {
    const f = firstName.toLowerCase();
    const l = lastName.toLowerCase();
    const d = domain.toLowerCase();
    return [
      `${f}.${l}@${d}`,
      `${f}${l}@${d}`,
      `${f[0]}${l}@${d}`,
      `${f}${l[0]}@${d}`,
      `${l}${f[0]}@${d}`
    ];
  } catch (error) {
    console.error('Error generating email patterns:', error);
    return [`${firstName.toLowerCase()}.${lastName.toLowerCase()}@${domain}`];
  }
};

export const fetchCompanyInfo = async (domain: string): Promise<{ info: string; sources: GroundingChunk[] }> => {
  try {
    const info = `Summary for ${domain}\n- Industry: Unknown (sample)\n- Description: This is a placeholder description generated by LeadProton AI.\n- Headquarters: Not available.`;
    return { info, sources: [] };
  } catch (error) {
    console.error('Error fetching company info:', error);
    return { info: 'Could not fetch company information.', sources: [] };
  }
};

export const getStrategicAnalysis = async (leadName: string, companyName: string, role: string): Promise<string> => {
  try {
    return [
      `Lead: ${leadName} (${role}) at ${companyName}`,
      '',
      '1) Likely pain points:',
      '- Pipeline visibility and lead quality',
      '- Manual prospecting and low reply rates',
      '',
      '2) Value propositions:',
      '- Automated discovery + enrichment to boost qualified leads',
      '- AI-personalized outreach to increase replies',
      '',
      '3) 3-step email outline:',
      '- Intro + value (why now)',
      '- Social proof + brief insight',
      '- Clear CTA with low friction next step',
      '',
      '4) Cold call starters:',
      '- Ask about current prospecting workflow and success metrics',
      '- Share a quick insight and ask for feedback'
    ].join('\n');
  } catch (error) {
    console.error('Error getting strategic analysis:', error);
    return 'Failed to generate strategic analysis.';
  }
};

export const findCompanyLocation = async (
  companyName: string,
  _userLocation: { latitude: number; longitude: number }
): Promise<{ info: string; sources: GroundingChunk[] }> => {
  try {
    const info = `Headquarters for ${companyName}: Not available (sample).`;
    return { info, sources: [] };
  } catch (error) {
    console.error('Error finding company location:', error);
    return { info: 'Could not find company location information.', sources: [] };
  }
};

export const generateSubjectLines = async (templateBody: string): Promise<string[]> => {
  try {
    const base = templateBody.slice(0, 50).replace(/\s+/g, ' ').trim();
    return [
      `Quick question about ${base || 'your current outreach'}`,
      'A faster path to qualified leads',
      'Idea to improve reply rates',
      'Personalized take on your GTM',
      'Can we boost your pipeline?'
    ];
  } catch (error) {
    console.error('Error generating subject lines:', error);
    return [];
  }
};

export const generateEmailBody = async (prompt: string): Promise<string> => {
  try {
    return [
      'Hi {firstName},',
      '',
      `I had a quick idea after reading: "${prompt}".`,
      'We help teams automate lead discovery and personalize outreach using AI. Many see higher reply rates within weeks.',
      '',
      'Worth a short chat to share a few examples?',
      '',
      'Best,',
      'â€” Your Name'
    ].join('\n');
  } catch (error) {
    console.error('Error generating email body:', error);
    return '';
  }
};

export const personalizeEmailBody = async (lead: Lead, baseBody: string): Promise<string> => {
  try {
    const replaced = baseBody
      .replace(/{firstName}/g, lead.firstName)
      .replace(/{lastName}/g, lead.lastName)
      .replace(/{companyName}/g, lead.companyName)
      .replace(/{role}/g, lead.role ?? '');
    return replaced;
  } catch (error) {
    console.error('Error personalizing email body:', error);
    return baseBody;
  }
};

